class Queue:

    # Инициализация объекта execution

    def __init__(self):
        self.queue = []
        self.front = -1
        self.rear = -1
        self.counter = 1

    # Добавление данных в очередь

    def enqueue(self):
        self.queue.append(self.counter)
        if len(self.queue) <= 10 and None not in self.queue:
            self.front = 0
            self.rear += 1
            self.counter += 1
            return self.queue
        elif None in self.queue:    # Прим: ограничение очередей. Новые значения можно добавлять лишь после сброса
            return 'ERROR: Can only enqueue after reset'
        else:
            self.counter = self.queue.pop(-1)
            return 'FULL'

    # Удаление данных из очереди

    def dequeue(self):
        if any(map(lambda elem: elem is not None, self.queue)) and len(self.queue) != 0 and self.front < self.rear:
            self.queue[self.front] = None   # Удаляем элемент очереди
            self.front += 1
            return self.queue
        else:
            self.counter = 1    #
            self.front = -1     #
            self.rear = -1      # Сброс очереди, когда она остаётся пустой
            self.queue = []     #
            return 'EMPTY'

    # Проверка на полноту очереди

    def is_empty(self):
        return len(self.queue) == 0

    # Проверка на пустоту очереди

    def is_full(self):
        return len(self.queue) == 10

    # Крайнее левое значение очереди

    def peek(self):
        return self.queue[self.front]

# Функция проверки валидности входных данных


def try_command(command):
    flag = True
    while flag is True:
        try:
            command = int(input())

        except ValueError:
            print('Wrong value!')

        else:
            flag = False

    return command


# Тело программы

def body(commands, command):
    while command != 6:  # 6=quit

        # Проверяем наличие желаемого индекса в списке действий

        if command not in range(1, 6):
            print('Wrong value!')
            command = try_command(command)  # Возвращаемся к проверке валидности данных

        else:
            command_exec = eval(f'execution.{commands[command]}')  # Динамически преобразуем строку в метод
            print(command_exec())  # Отображение результата выбранного метода (хз пока как сделать иначе)
            command = try_command(command)  # Возвращаемся к проверке валидности данных

    else:
        print('Exiting...')


commands = ['', 'enqueue', 'dequeue', 'is_empty', 'is_full', 'peek']  # Список команд

execution = Queue()  # Присвоение объекта классу
command = None  # Значение команды по умолчанию

print('What do you want to do with a queue?\n[1]Enqueue\n[2]Dequeue\n[3]IsEmpty\n[4]IsFull\n[5]Peek\n[6]Quit')
body(commands, try_command(command))
